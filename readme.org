* bashpass

password generator, storage, reference for the terminal and/or X.

* Use Case

** I can create passwords
**    //  recall passwords
**    //  update passwords
**    //  delete accounts
**    //  import a csv file


** <p align="center">[bash](bashpass.sh)</p>
<p align="center">Terminal only. (bashpass.sh terminal)</p>
<p align="center"><a href="assets/bp.png"><img alt="bashpass" src="assets/bp.png"></a></p>

** <p align="center">[dialog](bashpass.sh)</p>
<p align="center">Without X using dialog. (bashpass.sh dialog)</p>
<p align="center"><a href="assets/dp.png"><img alt="dialogpass" src="assets/dp.png"></a></p>

** <p align="center">[Xdialog](bashpass.sh)</p>
<p align="center">On X using Xdialog.</p>
<p align="center"><a href="assets/xp.png"><img alt="dialogpass" src="assets/xp.png"></a></p>


* Usage

Normal use is: ~bashpass.sh [some.db3] [Xdialog|dialog|terminal]~.

First time use, on the other hand ...

** First time only:

*** If you don't already have one, make a default [gpg2 keyring](https://www.gnupg.org/gph/en/manual/c14.html).

*** Make and encrypt a .db3 file.

**** The easy way: Run ~install.sh git.db3~ from [bashpass.sh](bashpass.sh)'s directory. It'll create git.db3 for you, encrypt it to your personal keyring and add a comfy bp-launch.sh link in your ~${HOME}/bin~ folder

**** The hard way: You'll need to build git.db3 like so: ~sqlite3 git.db3 < ac.sql~ and encrypt it like so: ~gpg2 --default-recipient-self --output git.db3.asc --encrypt git.db3~, finally link bp-launch.sh somewhere convenient eg: ~${HOME}/bin/bp-launch.sh~ and make sure ~${HOME}/bin~ is in your ~${PATH}~.

    Reason being SQLite3 .db3 file you'll work with, needs to be encrypted to your own keyring.

    All relevant files must reside in [bashpass.sh](bashpass.sh)'s directory.

** Subsequent uses:

For subsequent uses just fire up the script directly: ~bashpass.sh git.db3~ from a terminal, or ~bp-launch.sh git.db3~ from X, launcher application, DE hotkey, menu, etc.

** Optional command line arguments

If you'd like to test other UI options try: ~bashpass.sh [Xdialog|dialog|terminal]~

You can provide an SQLite3 database for use with bashpass.sh / bp-launch.sh.

That db needs to have a ~.db3~ extension and to be encrypted with your personal keyring with an ~.asc~ extension.

The easiest way to do that is by issuing an ~./install.sh example.db3~ command from bashpass's directory.

You'll end up with an ~example.db3.asc~ file witch will be usable like so: ~bp-launch.sh example.db3~.

The order of arguments is irrelevant. (ie: bashpass.sh test.db3 terminal == bashpass.sh terminal test.db3)

** NOTES

 1. You can only have one instance of [bashpass.sh](bashpass.sh) running at any given time for obvious reasons.

    Internally enforced by a simple MUTEX implementation.

 2. Consider launching [bashpass.sh](bashpass.sh) with launch from terminal option enabled (where available) and through [bp-launch.sh](bp-launch.sh) if not. (DE hotkey for example).

    For SQLite session availability mainly but also for troubleshooting purposes.

 3. Passwords generated by [bashpass.sh](bashpass.sh) are 64 character long ~[:alnum:]!@#$%^&*()~ type random strings from ~/dev/urandom~.

 4. SQLite3 db used has to have a *.db3 extension. If no database parameter given, application will default on git.db3.

** Security concerns

This application assumes you can secure the safety of your computer at least for the duration of its operation.

*.db3 files used by this application get shredded upon trapped exit signals, otherwise a file recovery tool could reveal unencrypted versions of them.

* TODOS

** ✔ [ ] Encryption
CLOSED: [2019-08-18 Sun 17:56]
** ✘ [ ] +Clipboard+ (more prerequisites, dependencies, eg: ~Xclip~) Consult your terminal's manual for copy-paste functionality.
CLOSED: [2019-08-18 Sun 17:56]
** ✔ [ ] Modularize UI usage depending on the environment.
CLOSED: [2019-08-18 Sun 17:57]

**** ✔ [ ] GUI's based on availability
CLOSED: [2019-08-18 Sun 17:57]
**** ✔ [ ] GUI/TUI based on X
CLOSED: [2019-08-18 Sun 17:57]
