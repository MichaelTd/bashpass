#+title: bashpass
#+author: michaeltd
#+date: <2019-08-18 Sun>
#+description: password generator, storage, reference for the terminal and/or X.
#+options: toc:t num:t
password generator, storage, reference for the terminal and/or X.

* Use Case

1. I can create passwords
2. \slash \slash  recall passwords
3. \slash \slash  update passwords
4. \slash \slash  delete accounts
5. \slash \slash  import a csv file

** [[file:bashpass.sh][bashpass.sh]] [[file:assets/bp.png][terminal]]
[[file:assets/bp.png]]
** [[file:bashpass.sh][bashpass.sh]] [[file:assets/dp.png][dialog]]
[[file:assets/dp.png]]
** [[file:bashpass.sh][bashpass.sh]] [[file:assets/xp.png][Xdialog]]
[[file:assets/xp.png]]

* Files
1. [[file:ac.sql]]
   SQLite database create example script
2. [[file:bashpass.sh]]
   main script
3. [[file:import.csv]]
   Data import example format
4. [[file:install.sh]]
   First time run only commands
5. [[file:readme.org]]
   This file

* Dependencies

1. GNU Privacy Guard v2

   You need gnupg installed, ~gpg2~ executable readily available in ~${PATH}.~

2. SQLite v3

   SQLite3 installed and ~sqlite3~ available in ~${PATH}.~

3. BASH v4

   A resent bash installation of major version no less than 4.

4. Optionally...

   1. Xdialog for an X client.

   2. dialog for a tty TUI.

   3. finally, xclip for some middle click password pasting functionality.

* Usage

** Use at your own risk!!!

This author makes no claims, guarantees, promisses of any kind!

This project is just an UI/CRUD/SQL/PGP playground!

With that out of the way, If you're still here, continue on ...

** tl;dr

1. ~git clone https://github.com/michaeltd/bashpass; cd bashpass~

2. ~./install.sh [git.sqlite]~

3. ~Usage: bashpass.sh [git.sqlite (default)] [Xdialog|dialog|terminal] (default: any available in that order) [debug] [help] (prints usage and quits)~

** In detail

*** First time only:

**** [[https://www.gnupg.org/gph/en/manual/c14.html][Default gpg2 keyring]]

If you don't already have one, make a [[https://www.gnupg.org/gph/en/manual/c14.html][default gpg2 keyring]].

**** Make and encrypt a ~.sqlite~ file.

***** The easy way:

Run ~install.sh [git.sqlite]~ from [[file:bashpass.sh][bashpass.sh]]'s directory.

It'll create ~git.sqlite~ for you, encrypt it to your personal keyring

***** The hard way:

You'll need to build ~git.sqlite~ like so: ~sqlite3 git.sqlite < ac.sql~

and encrypt it like so: ~gpg2 --default-recipient-self --output git.sqlite.pgp --encrypt git.sqlite~,

Reason being SQLite3 ~.sqlite~ file you'll work with, needs to be encrypted to your own keyring.

All relevant files must reside in [[file:bashpass.sh][bashpass.sh]]'s directory.

*** Subsequent uses:

For subsequent uses just fire up the script directly: ~bashpass.sh~ from a terminal,

** Optional command line arguments

- If you'd like to test other UI options try: ~bashpass.sh [Xdialog|dialog|terminal]~, needless to say they have to be installed. If not ~bashpass.sh~ will default to the highest available option in that order.

- You can provide an SQLite3 database for use with ~bashpass.sh~. That db needs to have a ~.sqlite~ extension and to be encrypted with your personal keyring with an ~.gpg~ extension.

- The ~debug~ option will ~set -x~ to ~bashpass.sh~, enabling it to echo commands in the terminal. Be warned: Really noisy!

- Help will print out Usage and exit.

- The order of arguments is irrelevant. ie: ~bashpass.sh test.sqlite terminal~ == ~bashpass.sh terminal test.sqlite~)

* Notes

 1. You can only have one instance of [[file:bashpass.sh][bashpass.sh]] running at any given time for obvious reasons. Internally enforced by a simple MUTEX implementation.

 2. Consider launching [[file:bashpass.sh][bashpass.sh]] with launch from terminal option enabled (where available) as it will not run otherwise. For SQLite session availability, gnupg input and debugging purposes.

 3. Passwords generated by [[file:bashpass.sh][bashpass.sh]] are 64 character long ~[:alnum:]\tilde!@#$%^_+:?~ type random strings from ~/dev/urandom~.

 4. SQLite3 db used has to have a ~*.sqlite~ extension. If no database parameter given, the script will default to ~git.sqlite~.

 5. After <2019-11-27 Wed> if in Xdialog mode and on single record Create,Retrieve,Update operations, depending on xclip availability, you'll be able to paste affected password via middleclick.

 7. Again... Not tested for production use at any load or capacity!

** Security concerns

This script assumes you can secure the safety of your computer hardware/software at least for the duration of its operations.

~*.sqlite~ files used by this application get shredded upon quiting, otherwise a file recovery tool could reveal unencrypted versions of them.

Backup never hurt nobody ... ;..;

* TO-DOS [3/3] [100%]

** ✔ Encryption
CLOSED: [2019-08-22 Thu 01:43]
Add pgp2 encryption

** ✔ Clipboard
CLOSED: [2019-11-27 Wed 02:21]
Depending on xclip availability on Xdialog mode only and upon single record Create,Retrieve,Update operations selected password will be copied to ~XA_PRIMARY~ xclip target with it's trailing newline ('\n') removed (pastable with middle mouse button)

** ✔ Modular UI [2/2] [100%]
CLOSED: [2019-08-22 Thu 01:43]
depending on the environment.

*** ✔ GUI
CLOSED: [2019-08-22 Thu 01:44]
based on availability

*** ✔ GUI/TUI
CLOSED: [2019-08-22 Thu 01:44]
based on X
