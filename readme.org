#+Title: bashpass
#+Author: michaeltd
#+Date: <2019-08-18 Sun>

* bshpass: password generator, storage, reference for the terminal and/or X.

** Use Case

1) I can create passwords
1)  \slash \slash  recall passwords
1)  \slash \slash  update passwords
1)  \slash \slash  delete accounts
1)  \slash \slash  import a csv file

*** [[bashpass.sh][bashpass.sh]] [[assets/bp.png][terminal]]
[[assets/bp.png]]

*** [[bashpass.sh][bashpass.sh]] [[assets/dp.png][dialog]]
[[assets/dp.png]]

*** [[bashpass.sh][bashpass.sh]] [[assets/xp.png][Xdialog]]
[[assets/xp.png]]

** Usage

Normal use is: ~bashpass.sh [some.db3] [Xdialog|dialog|terminal]~.

First time use, on the other hand ...

*** First time only:

**** [[https://www.gnupg.org/gph/en/manual/c14.html][Default gpg2 keyring]]
If you don't already have one, make a [[https://www.gnupg.org/gph/en/manual/c14.html][default gpg2 keyring]].

**** Make and encrypt a .db3 file.

***** The easy way:
Run ~install.sh git.db3~ from [[bashpass.sh][bashpass.sh]]'s directory. It'll create git.db3 for you, encrypt it to your personal keyring and add a comfy bp-launch.sh link in your ~\tilde/bin~ folder

***** The hard way:
You'll need to build git.db3 like so: ~sqlite3 git.db3 < ac.sql~ and encrypt it like so: ~gpg2 --default-recipient-self --output git.db3.asc --encrypt git.db3~, finally link ~bp-launch.sh~ somewhere convenient eg: ~${HOME}/bin/bp-launch.sh~ and make sure ~${HOME}/bin~ is in your ~${PATH}~.

Reason being SQLite3 ~.db3~ file you'll work with, needs to be encrypted to your own keyring.

All relevant files must reside in [[bashpass.sh][bashpass.sh]]'s directory.

*** Subsequent uses:

For subsequent uses just fire up the script directly: ~bashpass.sh git.db3~ from a terminal, or ~bp-launch.sh git.db3~ from X, launcher application, DE hotkey, menu, etc.

*** Optional command line arguments

If you'd like to test other UI options try: ~bashpass.sh [Xdialog|dialog|terminal]~

You can provide an SQLite3 database for use with ~bashpass.sh~ / ~bp-launch.sh~.

That db needs to have a ~.db3~ extension and to be encrypted with your personal keyring with an ~.asc~ extension.

The easiest way to do that is by issuing an ~./install.sh example.db3~ command from bashpass's directory.

You'll end up with an ~example.db3.asc~ file witch will be usable like so: ~bp-launch.sh example.db3~.

The order of arguments is irrelevant. (ie: ~bashpass.sh test.db3 terminal~ == ~bashpass.sh terminal test.db3~)

** Notes

 1. You can only have one instance of [[bashpass.sh][bashpass.sh]] running at any given time for obvious reasons.

    Internally enforced by a simple MUTEX implementation.

 1. Consider launching [[bashpass.sh][bashpass.sh]] with launch from terminal option enabled (where available) and through [[bp-launch.sh][bp-launch.sh]] if not. (DE hotkey for example).

    For SQLite session availability mainly but also for troubleshooting purposes.

 1. Passwords generated by [[bashpass.sh][bashpass.sh]] are 64 character long ~[:alnum:]\tilde!@#$%^&*()~ type random strings from ~/dev/urandom~.

 1. SQLite3 db used has to have a ~*.db3~ extension. If no database parameter given, application will default on ~git.db3~.

** Security concerns

This application assumes you can secure the safety of your computer at least for the duration of its operation.

~*.db3~ files used by this application get shredded upon trapped exit signals, otherwise a file recovery tool could reveal unencrypted versions of them.

** Todos

*** ✔ [ ] Encryption
CLOSED: [2019-08-18 Sun 17:56]
*** ✘ [ ] +Clipboard+ ...
more prerequisites, dependencies, eg: ~Xclip~
Consult your terminal's manual for copy-paste functionality.
CLOSED: [2019-08-18 Sun 17:56]
*** ✔ [ ] Modularize UI usage ...
depending on the environment.
CLOSED: [2019-08-18 Sun 17:57]

**** ✔ [ ] GUI's based on availability
CLOSED: [2019-08-18 Sun 17:57]
**** ✔ [ ] GUI/TUI based on X
CLOSED: [2019-08-18 Sun 17:57]
